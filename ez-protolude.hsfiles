{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
#synopsis:           Short description of your package
#description:        Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"
category:            {{category}}{{^category}}Example{{/category}}

extra-source-files:
- README.md

ghc-options: -Wall -Werror -Wno-type-defaults

default-extensions:
- ApplicativeDo
- FlexibleContexts
- OverloadedStrings
- ScopedTypeVariables
- StrictData
- MultiWayIf

dependencies:
- base-noprelude
- protolude
- either
- safe
- filepath

library:
  source-dirs: src

executables:
  {{name}}:
    source-dirs:      app
    main:             Main.hs
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main: test.hs
    source-dirs: test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - base-noprelude
    - tasty
    - tasty-hspec
    - tasty-hunit
    - tasty-quickcheck
    - tasty-hedgehog
    - hedgehog
    - {{name}}

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/test.hs #-}
import           Test.Tasty

import           ExampleTest

main :: IO ()
main = tests >>= defaultMain

tests :: IO TestTree
tests = testGroup "All" <$> sequence [exampleTests]

{-# START_FILE test/ExampleTest.hs #-}
module ExampleTest where

import qualified Hedgehog                      as H
import qualified Hedgehog.Gen                  as Gen
import qualified Hedgehog.Range                as Range
import           Test.Tasty
import qualified Test.Tasty.Hedgehog           as H
import           Test.Tasty.HUnit
import           Test.Tasty.Hspec
import           Test.Tasty.QuickCheck
import           Lib

exampleTests :: IO TestTree
exampleTests = testGroup "Example Tests" <$> sequence
  [ testListCompare
  , testLib
  , testAdditionCommutative
  , testSortReverse
  , testPrelude
  , testMultiplication
  , testGenerateTree
  , testGenerateTrees
  , testReverse
  ]

-- HUnit test case
testListCompare :: IO TestTree
testListCompare =
  pure $ testCase "List Compare" $ [1, 2, 3] `compare` [1, 2] @?= GT

testLib :: IO TestTree
testLib = pure $ testCase "Lib Test" someFunc

-- QuickCheck property
testAdditionCommutative :: IO TestTree
testAdditionCommutative =
  pure $ testProperty "Addition is commutative" $ \(a :: Int) (b :: Int) ->
    a + b == b + a

testSortReverse :: IO TestTree
testSortReverse = pure $ testProperty "Sort reverse" $ \(ints :: [Int]) ->
  sort ints == sort (reverse ints)

-- Hspec specification
testPrelude :: IO TestTree
testPrelude =
  testSpec "Prelude"
    .          describe "Prelude.head"
    .          it "returns the first element of a list"
    $          head [23 ..]
    `shouldBe` Just (23 :: Int)

testMultiplication :: IO TestTree
testMultiplication = pure $ testGroup
  "Multiplication"
  [testProperty "One is identity" $ \(a :: Int) -> a * 1 == a]

testGenerateTree :: IO TestTree
testGenerateTree = do
  input <- pure "Some input"
  pure $ testCase input $ pure ()

testGenerateTrees :: IO TestTree
testGenerateTrees = do
  inputs <- pure ["First input", "Second input"]
  pure . testGroup "Generate trees" $ map (\s -> testCase s $ pure ()) inputs

-- Hedgehog property
testReverse :: IO TestTree
testReverse = pure . H.testProperty "Reverse" . H.property $ do
  xs <- H.forAll $ Gen.list (Range.linear 0 100) Gen.alpha
  reverse (reverse xs) H.=== xs

{-# START_FILE src/Prelude.hs #-}

module Prelude
  ( module E
  , orEmpty'
  , headSingle
  , headSingleMay
  )
where

import           Protolude                     as E
import           Control.Monad.Fail            as E
import           Data.Either.Combinators       as E
                                                          ( mapLeft )
import           Data.List                     as E
                                                          ( partition )
import           Safe                          as E
                                                          ( at
                                                          , fromJustNote
                                                          , headNote
                                                          , lastNote
                                                          , tailNote
                                                          )
import           System.FilePath               as E
                                                          ( (</>) )

orEmpty' :: Alternative f => Bool -> f a -> f a
orEmpty' b fa = if b then fa else empty

headSingle :: HasCallStack => [a] -> a
headSingle [a] = a
headSingle _   = panic "Expected a singleton list"

headSingleMay :: HasCallStack => [a] -> Maybe a
headSingleMay [a] = Just a
headSingleMay []  = Nothing
headSingleMay _   = panic "Expected zero or one in list"

{-# START_FILE src/Lib.hs #-}

module Lib
    ( someFunc
    ) where

someFunc :: IO ()
someFunc = putText "someFunc"


{-# START_FILE app/Main.hs #-}

module Main where

main :: IO ()
main = putText "hello world"

{-# START_FILE LICENSE #-}
BSD 3-Clause License

Copyright (c) {{year}}{{^year}}2019{{/year}}, {{author-name}}{{^author-name}}Author name here{{/author-name}}
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE README.md #-}
# {{name}}

add description of {{name}} here

{-# START_FILE Makefile #-}
package = {{name}}

stack = stack

main-is = {{name}}:exe:{{name}}

exec = {{name}}

# can limit which tests are run like: make test tests=MyTests
tests = All

run: build
	time $(stack) exec $(exec)

# e.g.   make format path=app/Main.hs
format:
	brittany --write-mode=inplace $(path)

# e.g.   make lint path=app/Main.hs
lint:
	hlint $(path)

clean:
	$(stack) clean

purge:
	$(stack) purge

build:
	$(stack) build --fast --ghc-options "-j4"

build-profile:
	$(stack) --work-dir .stack-work-profiling --profile build

ghci:
	$(stack) ghci --main-is $(main-is) --ghci-options='-j4 +RTS -A128m'

repl: ghci

test:
	$(stack) build --test --fast -j4 -- testopts="--ta '-p $(tests)'"

test-ghci:
	$(stack) ghci -test --ghci-options='-j4 +RTS -A128m'

bench:
	$(stack) build --bench --fast --ghc-options -j4

ghcid:
	$(stack) exec ghcid -- -c "stack ghci --main-is $(main-is) --test \
	--ghci-options='-fobject-code -j4 +RTS -A128m'"

dev-deps:
	$(stack) install ghcid brittany hlint weeder

.PHONY : format lint clean purge build build-profile run ghci repl test test-ghci bench ghcid reset-db dev-deps


{-# START_FILE .gitignore #-}
dist
dist-*
cabal-dev
*.o
*.hi
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
*.eventlog
.stack-work/
cabal.project.local
cabal.project.local~
.HTF/
.ghc.environment.*
*.cabal
*.log

{-# START_FILE scripts/helloworld.hs #-}
#!/usr/bin/env stack
-- stack --resolver lts-14.27 script --package turtle

{-# LANGUAGE OverloadedStrings #-}  --
                                    --
import           Turtle                       --
                                    --
main = echo "Hello, world!"
